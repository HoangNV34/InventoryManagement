@page "/addproduct"
@inject NavigationManager NavigationManager
@inject IAddProductUseCase AddProductUseCase
<h3>Add Product</h3>
<br />

@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <lable for="name">Product Name</lable>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <lable for="qty">Quantity</lable>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <lable for="price">Price</lable>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        
        <ProductInventoriesComponent @ref="ProductInventoriesComponent"
        OnInventorySelected="OnInventorySelected"
        ></ProductInventoriesComponent>

        <br/>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Product? product;
    private ProductInventoriesComponent ProductInventoriesComponent;
    protected override void OnInitialized()
    {
        this.product = new Product();
    }
    public async Task OnValidSubmit()
    {
        if(this.product != null)
        {
            // now we need to add relatioship between Product and Inventory It is a many to many relationships
            this.ProductInventoriesComponent.ProductInventories.ForEach(x =>
            {
                x.ProductId = this.product.ProductId;
            });

           // this.product.ProductInventories = this.ProductInventoriesComponent.ProductInventories;

            await AddProductUseCase.ExcuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
    private void OnInventorySelected(List<ProductInventory> productInventories )
    {
        this.product.ProductInventories = productInventories;
    }
}
